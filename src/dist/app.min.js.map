{"version":3,"sources":["app.js"],"names":["express","require","db","cors","config","Todos","env","PORT","authenticate","process","err","console","error","then","log","app","use","get","req","res","post","newTodos","regeneratorRuntime","async","_context","prev","next","body","awrap","create","status","send","t0","json","stop","findAll","attributes","todos","_context2","id","_context3","params","findByPk","sent","_context4","destroy","put","_req$body","title","description","completed","_context5","update","where","listen","concat"],"mappings":"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","file":"app.min.js","sourcesContent":["//Importamos express\r\nconst express = require('express');\r\nconst db = require('./utils/database');\r\nconst Todos = require('./models/todos.model');\r\nconst cors = require('cors');\r\nrequire('dotenv').config();\r\n\r\nconst PORT = process.env.PORT || 8000;\r\n\r\n//Creamos la instancia\r\n\r\n//Ejecutar el método authenticate\r\ndb.authenticate() //ES un método asincrono\r\n    .then(() => console.log('Base de datos conectada...'))\r\n    .catch(err => console.error(err));\r\n\r\n//Sincronizar mi bd\r\ndb.sync()\r\n  .then(() => console.log('Base de datos sincronizada'))\r\n  .catch((error) => console.log(error));\r\n\r\n\r\nconst app = express();\r\n\r\n//cors -> para que no nos rechazen la petición\r\napp.use(cors());\r\n\r\n//Sirve para extraer en json\r\napp.use(express.json());\r\n\r\n//Generamos una ruta app.get\r\napp.get('/', (req, res) => {\r\n    res.send('Servidor funcionando...')\r\n});\r\n\r\n//Un POST para crear una nueva tarea\r\napp.post('/todos', async (req, res) => {\r\n    try {\r\n        //Extraemos el cuerpo de la petición\r\n        const newTodos = req.body;\r\n\r\n        //Insertamos valores\r\n        await Todos.create(newTodos);\r\n\r\n        //Repondemos con un 201 = created\r\n        res.status(201).send();\r\n\r\n    } catch (error) {\r\n        res.status(400).json(error);\r\n    }\r\n});\r\n\r\n//Un GET para obtener todas las tareas\r\napp.get('/todos', async (req, res) => {\r\n    try {\r\n        const todos = await Todos.findAll({\r\n            attributes: ['id','title', 'description', 'completed']\r\n        });\r\n        res.json(todos);\r\n        \r\n    } catch (error) {\r\n        res.status(400).json(error);\r\n    }\r\n});\r\n\r\n//Un GET para obtener una tarea por su id\r\napp.get('/todos/id/:id', async (req, res) => {\r\n    try {\r\n        //Recuperar el parámetro de la ruta\r\n        const { id } = req.params;\r\n\r\n        const todos = await Todos.findByPk(id)\r\n        res.json(todos);\r\n        \r\n    } catch (error) {\r\n        res.status(400).json(error);\r\n    }\r\n});\r\n\r\n//Un DELETE para eliminar una tarea\r\napp.delete('/todos/:id', async (req, res) => {\r\n    try {\r\n        const { id } = req.params;\r\n        await Todos.destroy({\r\n            where: { id }\r\n        });\r\n        res.status(204).send();\r\n        \r\n    } catch (error) {\r\n        res.status(400).json(error);\r\n    }\r\n});\r\n\r\n//Un PUT para actualizar una tarea\r\napp.put('/todos/:id', async (req, res) => {\r\n    try {\r\n        const { id } = req.params;\r\n        const { title, description, completed } = req.body;\r\n        await Todos.update({title, description, completed}, {\r\n            where: { id }\r\n        });\r\n        res.status(204).send();\r\n\r\n    } catch (error) {\r\n        res.status(400).json(error);\r\n    }\r\n});\r\n\r\n\r\n\r\n//Dejar escuchando a nuestro servidor en un puerto\r\napp.listen(PORT, () => {\r\n    console.log(`Servidor escuchando en el puerto ${PORT}`)\r\n});\r\n\r\n"]}