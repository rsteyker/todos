{"version":3,"sources":["app.js"],"names":["express","require","db","authenticate","then","console","log","error","err","sync","app","use","json","get","req","res","post","newTodos","regeneratorRuntime","async","_context","prev","next","body","awrap","Todos","create","status","send","t0","stop","findAll","attributes","todos","_context2","id","_context3","params","findByPk","sent","_context4","destroy","put","_req$body","title","description","completed","_context5","update","where","listen"],"mappings":"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","file":"app.min.js","sourcesContent":["//Importamos express\r\nconst express = require('express');\r\nconst db = require('./utils/database');\r\nconst Todos = require('./models/todos.model');\r\n\r\n\r\n//Creamos la instancia\r\n\r\n//Ejecutar el método authenticate\r\ndb.authenticate() //ES un método asincrono\r\n    .then(() => console.log('Base de datos conectada...'))\r\n    .catch(err => console.error(err));\r\n\r\n//Sincronizar mi bd\r\ndb.sync()\r\n  .then(() => console.log('Base de datos sincronizada'))\r\n  .catch((error) => console.log(error));\r\n\r\nconst app = express();\r\n\r\n//Sirve para extraer en json\r\napp.use(express.json());\r\n\r\n//Generamos una ruta app.get\r\napp.get('/', (req, res) => {\r\n    res.send('Servidor funcionando...')\r\n});\r\n\r\n//Un POST para crear una nueva tarea\r\napp.post('/todos', async (req, res) => {\r\n    try {\r\n        //Extraemos el cuerpo de la petición\r\n        const newTodos = req.body;\r\n\r\n        //Insertamos valores\r\n        await Todos.create(newTodos);\r\n\r\n        //Repondemos con un 201 = created\r\n        res.status(201).send();\r\n\r\n    } catch (error) {\r\n        res.status(400).json(error);\r\n    }\r\n});\r\n\r\n//Un GET para obtener todas las tareas\r\napp.get('/todos', async (req, res) => {\r\n    try {\r\n        const todos = await Todos.findAll({\r\n            attributes: ['id','title', 'description', 'completed']\r\n        });\r\n        res.json(todos);\r\n        \r\n    } catch (error) {\r\n        res.status(400).json(error);\r\n    }\r\n});\r\n\r\n//Un GET para obtener una tarea por su id\r\napp.get('/todos/id/:id', async (req, res) => {\r\n    try {\r\n        //Recuperar el parámetro de la ruta\r\n        const { id } = req.params;\r\n\r\n        const todos = await Todos.findByPk(id)\r\n        res.json(todos);\r\n        \r\n    } catch (error) {\r\n        res.status(400).json(error);\r\n    }\r\n});\r\n\r\n//Un DELETE para eliminar una tarea\r\napp.delete('/todos/:id', async (req, res) => {\r\n    try {\r\n        const { id } = req.params;\r\n        await Todos.destroy({\r\n            where: { id }\r\n        });\r\n        res.status(204).send();\r\n        \r\n    } catch (error) {\r\n        res.status(400).json(error);\r\n    }\r\n});\r\n\r\n//Un PUT para actualizar una tarea\r\napp.put('/todos/:id', async (req, res) => {\r\n    try {\r\n        const { id } = req.params;\r\n        const { title, description, completed } = req.body;\r\n        await Todos.update({title, description, completed}, {\r\n            where: { id }\r\n        });\r\n        res.status(204).send();\r\n\r\n    } catch (error) {\r\n        res.status(400).json(error);\r\n    }\r\n});\r\n\r\n\r\n\r\n//Dejar escuchando a nuestro servidor en un puerto\r\napp.listen(8000, () => {\r\n    console.log(\"Servidor escuchando en el puerto 8000\")\r\n});\r\n\r\nconsole.log(process.env);"]}