{"version":3,"sources":["app.js"],"names":["express","require","db","Todos","authenticate","then","console","log","err","error","sync","app","use","json","get","req","res","send","post","newTodos","body","create","status","findAll","attributes","todos","id","params","findByPk","destroy","where","put","title","description","completed","update","listen","process","env"],"mappings":"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","sourcesContent":["//Importamos express\r\nconst express = require('express');\r\nconst db = require('./utils/database');\r\nconst Todos = require('./models/todos.model');\r\n\r\n\r\n//Creamos la instancia\r\n\r\n//Ejecutar el método authenticate\r\ndb.authenticate() //ES un método asincrono\r\n    .then(() => console.log('Base de datos conectada...'))\r\n    .catch(err => console.error(err));\r\n\r\n//Sincronizar mi bd\r\ndb.sync()\r\n  .then(() => console.log('Base de datos sincronizada'))\r\n  .catch((error) => console.log(error));\r\n\r\nconst app = express();\r\n\r\n//Sirve para extraer en json\r\napp.use(express.json());\r\n\r\n//Generamos una ruta app.get\r\napp.get('/', (req, res) => {\r\n    res.send('Servidor funcionando...')\r\n});\r\n\r\n//Un POST para crear una nueva tarea\r\napp.post('/todos', async (req, res) => {\r\n    try {\r\n        //Extraemos el cuerpo de la petición\r\n        const newTodos = req.body;\r\n\r\n        //Insertamos valores\r\n        await Todos.create(newTodos);\r\n\r\n        //Repondemos con un 201 = created\r\n        res.status(201).send();\r\n\r\n    } catch (error) {\r\n        res.status(400).json(error);\r\n    }\r\n});\r\n\r\n//Un GET para obtener todas las tareas\r\napp.get('/todos', async (req, res) => {\r\n    try {\r\n        const todos = await Todos.findAll({\r\n            attributes: ['id','title', 'description', 'completed']\r\n        });\r\n        res.json(todos);\r\n        \r\n    } catch (error) {\r\n        res.status(400).json(error);\r\n    }\r\n});\r\n\r\n//Un GET para obtener una tarea por su id\r\napp.get('/todos/id/:id', async (req, res) => {\r\n    try {\r\n        //Recuperar el parámetro de la ruta\r\n        const { id } = req.params;\r\n\r\n        const todos = await Todos.findByPk(id)\r\n        res.json(todos);\r\n        \r\n    } catch (error) {\r\n        res.status(400).json(error);\r\n    }\r\n});\r\n\r\n//Un DELETE para eliminar una tarea\r\napp.delete('/todos/:id', async (req, res) => {\r\n    try {\r\n        const { id } = req.params;\r\n        await Todos.destroy({\r\n            where: { id }\r\n        });\r\n        res.status(204).send();\r\n        \r\n    } catch (error) {\r\n        res.status(400).json(error);\r\n    }\r\n});\r\n\r\n//Un PUT para actualizar una tarea\r\napp.put('/todos/:id', async (req, res) => {\r\n    try {\r\n        const { id } = req.params;\r\n        const { title, description, completed } = req.body;\r\n        await Todos.update({title, description, completed}, {\r\n            where: { id }\r\n        });\r\n        res.status(204).send();\r\n\r\n    } catch (error) {\r\n        res.status(400).json(error);\r\n    }\r\n});\r\n\r\n\r\n\r\n//Dejar escuchando a nuestro servidor en un puerto\r\napp.listen(8000, () => {\r\n    console.log(\"Servidor escuchando en el puerto 8000\")\r\n});\r\n\r\nconsole.log(process.env);"],"file":"app.dev.js"}